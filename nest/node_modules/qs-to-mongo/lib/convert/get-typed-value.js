"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.getTypedValues = exports.getTypedValue = exports.regexpTest = void 0;
const bson_objectid_1 = __importDefault(require("bson-objectid"));
const iso8601_1 = require("./iso8601");
function isValidObjectId(id) {
    if (!id) {
        return false;
    }
    const hexString = id.toString().toLowerCase();
    return bson_objectid_1.default.isValid(hexString) && new bson_objectid_1.default(hexString).toString() === hexString
        ? true
        : false;
}
const regexpTest = (value) => value.match(/^\/(.*)\/(i?)$/);
exports.regexpTest = regexpTest;
function getTypedValue(value, { parseDate, parseObjectId } = {}) {
    if (value[0] === '!') {
        value = value.substr(1);
    }
    const regex = (0, exports.regexpTest)(value);
    const quotedString = value.match(/(["'])(?:\\\1|.)*?\1/);
    if (regex) {
        return new RegExp(regex[1], regex[2]);
    }
    else if (quotedString) {
        return quotedString[0].substr(1, quotedString[0].length - 2);
    }
    else if (value === 'true') {
        return true;
    }
    else if (value === 'false') {
        return false;
    }
    else if (iso8601_1.iso8601.test(value) && value.length !== 4) {
        return parseDate ? new Date(value) : new Date(value).toISOString();
    }
    else if (!isNaN(Number(value))) {
        return Number(value);
    }
    else if (value === 'null') {
        return null;
    }
    else if (isValidObjectId(value)) {
        return parseObjectId ? new bson_objectid_1.default(value) : value;
    }
    return value;
}
exports.getTypedValue = getTypedValue;
function getTypedValues(stringValues, options = {}) {
    return (stringValues.match(/("[^"]*")|('[^']*')|([^,]+)/g) || []).map(value => getTypedValue(value, options));
}
exports.getTypedValues = getTypedValues;
//# sourceMappingURL=get-typed-value.js.map