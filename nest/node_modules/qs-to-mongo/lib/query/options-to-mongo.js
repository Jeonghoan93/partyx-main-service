"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.parseQueryOptions = void 0;
const fields_to_projection_1 = require("./fields-to-projection");
const omit_to_projection_1 = require("./omit-to-projection");
const sort_to_mongo_1 = require("./sort-to-mongo");
function parseQueryOptions(query, { maxLimit = 9007199254740992, parameters }) {
    const parsedOptions = {};
    const projection = (0, fields_to_projection_1.fieldsToProjection)(query[parameters.fields]);
    const negativeProjection = (0, omit_to_projection_1.omitFieldsToProjection)(query[parameters.omit]);
    const sort = (0, sort_to_mongo_1.sortToMongo)(query[parameters.sort]);
    if (!Number.isInteger(maxLimit) || maxLimit < 0) {
        throw new Error(`'maxLimit' option must be a positive integer.`);
    }
    if (projection) {
        parsedOptions.projection = projection;
    }
    if (negativeProjection) {
        parsedOptions.projection = negativeProjection;
    }
    if (sort) {
        parsedOptions.sort = sort;
    }
    if (query[parameters.offset]) {
        const skip = parseInt(query[parameters.offset], 10);
        if (!Number.isInteger(skip) || skip < 0) {
            throw new Error(`'skip' option must be a positive integer.`);
        }
        parsedOptions.skip = skip;
    }
    if (query[parameters.limit]) {
        const limit = parseInt(query[parameters.limit], 10);
        if (!Number.isInteger(limit)) {
            throw new Error(`'skip' option must be a positive integer.`);
        }
        parsedOptions.limit = Math.min(limit, maxLimit);
    }
    else if (query[parameters.limit] === 0) {
        parsedOptions.limit = 0;
    }
    return parsedOptions;
}
exports.parseQueryOptions = parseQueryOptions;
//# sourceMappingURL=options-to-mongo.js.map